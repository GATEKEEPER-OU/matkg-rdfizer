# ############################################################################ #
#                                 NutritionActivity
# ############################################################################ #

<#NutritionActivity> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'nutrition')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/HLF240/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class ho:HLF240MealActivity;
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P3hasNote;
    rr:objectMap [
      rml:reference "resource.code.coding[0].display";
    ]
  ];

  #
  # Metadata
  #
  rr:predicateObjectMap [
    rr:predicate ho:P14carriedOutBy;
    rr:objectMap [
      rr:parentTriplesMap <#Patient>;
      rr:joinCondition [
        rr:child "resource.subject.display";
        rr:parent "resource.id";
      ];
    ];
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P4hasTimeSpan;
    rr:objectMap [
      rr:parentTriplesMap <#NutritionEffectiveDateTime>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.id";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P2hasType;
    rr:objectMap [
      rr:parentTriplesMap <#NutritionType>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.id";
      ];
    ];
  ];

  #
  # Link(s)
  #
  rr:predicateObjectMap [
    rr:predicate ho:P117includes;
    rr:objectMap [
      rr:parentTriplesMap <#NutritionMeasurement>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.id";
      ];
    ];
  ];
.

<#NutritionType> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'nutrition')]]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/HLF277/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class ho:HLF277MealType;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P3hasNote;
    rr:objectMap [
      rml:reference "resource.category[0].coding[0].code";
    ]
  ];
.

<#NutritionMeasurement> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'nutrition')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/HLF349/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class ho:HLF349MealMeasurement;
  ];

  #
  # Link(s)
  #
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactFatDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactSaturatedFatDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactPolySaturatedFatDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactMonoSaturatedFatDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactCarbsDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactDietaryFiberDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactProteinDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactCholesterolDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactSodiumDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactPotassiumDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactVitaminADimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactVitaminCDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactCalsiumDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactIronDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#HeliosTransFatDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactSugarDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
  rr:predicateObjectMap [
    rr:predicate ho:P40observedDimension;
    rr:objectMap [
      rr:parentTriplesMap <#NactGlucoseDimension>;
      rr:joinCondition [
        rr:child "resource.id";
        rr:parent "resource.derivedFrom[0].display";
      ];
    ];
  ];
.

<#NactGlucoseDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'glucose')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Glucose/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Glucose;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactSugarDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'sugar')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Sugar/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Sugar;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#HeliosTransFatDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'trans_fat')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/TransFat/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class helios:TransFat;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactIronDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'iron')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Iron/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Iron;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactCalsiumDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'calcium')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Calcium/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Calcium;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactVitaminCDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'vitamin_c')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/VitaminC/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:C;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactVitaminADimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'vitamin_a')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/VitaminA/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:A;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactPotassiumDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'potassium')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Potassium/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Potassium;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactSodiumDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'sodium')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Sodium/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Sodium;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactCholesterolDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'cholesterol')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Cholesterol/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Cholesterol;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactProteinDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'protein')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Protein/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Protein;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactDietaryFiberDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'dietary_fiber')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Fiber/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Fiber;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactCarbsDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'carbohydrate')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Carbohydrate/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Carbohydrate;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactMonoSaturatedFatDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'monosaturated_fat')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/MonounsaturatedFat/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Monounsaturated_fat;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactPolySaturatedFatDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'polysaturated_fat')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/PolyunsaturatedFat/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Polyunsaturated_fat;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactSaturatedFatDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'saturated_fat')]]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Saturated_fat/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Saturated_fat;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NactFatDimension> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'total_fat')]]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/Fat/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class nact:Fat;
  ];

  #
  # Data
  #
  rr:predicateObjectMap [
    rr:predicate ho:P91hasUnit;
    rr:objectMap [
      rml:reference "resource.valueQuantity.unit";
    ]
  ];

  rr:predicateObjectMap [
    rr:predicate ho:P90hasValue;
    rr:objectMap [
      rml:reference "resource.valueQuantity.value";
    ]
  ];
.

<#NutritionEffectiveDateTime> a rr:TriplesMap;
  rml:logicalSource [
    rml:source "__RML_SRC__";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.entry[?(@.resource.resourceType == 'Observation' && @.resource.code.coding[0].code == 'nutrition')]"
  ];

  rr:subjectMap [
    rr:template "https://opensource.samsung.com/projects/helifit/type/E52/code/{resource.code.coding[0].code}/id/{resource.id}";
    rr:class ho:E52TimeSpan;
  ];

  rr:predicateObjectMap [
    rr:predicate ho:EP9effectiveDatatime;
    rr:objectMap [
      rml:reference "resource.effectiveDateTime";
      rr:datatype xsd:dateTime
    ]
  ];
.